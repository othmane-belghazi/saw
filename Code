import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px

# -------- Fonctions de calcul --------
def compute_matrix(alpha, beta):
    """
    Construit M selon :
    M[0,0] = 0
    M[0,j] = M[0,j-1] + beta[j]
    M[i,j] = M[i-1,j] + alpha[i]
    """
    I = len(alpha)
    J = len(beta)
    M = np.zeros((I, J))
    # première ligne (i=0)
    for j in range(1, J):
        M[0, j] = M[0, j-1] + beta[j]
    # reste (i>=1)
    for i in range(1, I):
        for j in range(J):
            M[i, j] = M[i-1, j] + alpha[i]
    return M

# -------- Interface Streamlit --------
st.title("Matrice de Majoration")
st.write("*Dimensions :* 10 segments concrétisation (i=0…9) × 20 segments ELR (j=0…19)")

# Saisie des pas α et β par l'utilisateur
st.sidebar.header("Pas α_i et β_j")
with st.sidebar.expander("α_i (10 valeurs)", expanded=True):
    alpha = [st.number_input(f"α_{i}", value=0.0, step=0.1, key=f"alpha_{i}") for i in range(10)]
with st.sidebar.expander("β_j (20 valeurs)", expanded=False):
    beta = [st.number_input(f"β_{j}", value=0.0, step=0.1, key=f"beta_{j}") for j in range(20)]
alpha = np.array(alpha, dtype=float)
beta = np.array(beta, dtype=float)

# Calcul de la matrice
M = compute_matrix(alpha, beta)

# DataFrame
df = pd.DataFrame(
    M,
    index=[f"i={i}" for i in range(M.shape[0])],
    columns=[f"j={j}" for j in range(M.shape[1])]
)

# Visualisation interactive - table éditable
st.subheader("Matrice éditable (tri/filtre)")
st.data_editor(df, num_rows="fixed", width=None)

# Visualisation interactive - heatmap
st.subheader("Heatmap interactive")
fig_heat = px.imshow(
    M,
    labels={"x": "ELR (j)", "y": "Concrétisation (i)", "color": "M"},
    x=df.columns,
    y=df.index,
    aspect="auto"
)
fig_heat.update_traces(hovertemplate='i=%{y}<br>j=%{x}<br>M=%{z:.2f}')
st.plotly_chart(fig_heat, use_container_width=True)

# Visualisation interactive - surface 3D
st.subheader("Surface 3D interactive")
# Axes pour surface
x_labels = [int(col.split('=')[1]) for col in df.columns]
y_labels = [int(idx.split('=')[1]) for idx in df.index]
fig_surf = px.surface(
    x=x_labels,
    y=y_labels,
    z=M,
    labels={"x": "j (ELR)", "y": "i (Concrétisation)", "z": "M"}
)
st.plotly_chart(fig_surf, use_container_width=True)
