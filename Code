import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# 1. Data Loading and Preparation
@st.cache_data
def load_data(elr_path, tarif_path, activite_path, taux_path):
    elr = pd.read_csv(elr_path)
    tarif = pd.read_csv(tarif_path)
    activite = pd.read_csv(activite_path)
    taux = pd.read_csv(taux_path)
    return elr, tarif, activite, taux

# 2. Filtering and Segmentation
@st.cache_data
def segment_elr(elr_df, n_segments=20):
    elr_filtered = elr_df[elr_df['Pol Formule'] == 'Atout PRO'].copy()
    elr_filtered = elr_filtered.rename(columns={'Pourcentage ELR':'ELR_pct'})
    bins = np.quantile(elr_filtered['ELR_pct'], np.linspace(0,1,n_segments+1))
    labels = [f"G{idx+1}" for idx in range(n_segments)]
    elr_filtered['Segment_ELR'] = pd.cut(elr_filtered['ELR_pct'], bins=bins, labels=labels, include_lowest=True)
    # Build segment table
    seg = elr_filtered.groupby('Segment_ELR')['ELR_pct'].agg(['min','max']).reset_index()
    seg.columns = ['Groupe','Min Pourcentage','Max Pourcentage']
    return elr_filtered, seg

@st.cache_data
def filter_tarif(tarif_df):
    tarif_filtered = tarif_df[tarif_df['Produit'] == 'AtoutsPRO'].copy()
    return tarif_filtered

# 3. Merge ELR and Tarif
@st.cache_data
def merge_elr_tarif(elr_df, tarif_df):
    merged = elr_df.merge(tarif_df, left_on='Code activité', right_on='Code_acti_ET100', how='inner')
    return merged

# 4. Enrich with 'marché'
@st.cache_data
def enrich_marche(df, activite_df):
    a = activite_df.rename(columns={'CodeActivite_AtoutsPro':'Code activité','marché_réel':'marché'})
    enriched = df.merge(a[['Code activité','marché']], on='Code activité', how='left')
    return enriched

# 5. Merge with taux concrétisation and segment
@st.cache_data
def merge_taux(df, taux_df, n_segments=10):
    merged = df.merge(taux_df.rename(columns={'Code':'Code activité'}), on='Code activité', how='left')
    merged = merged.rename(columns={'Taux':'Taux_pct'})
    # Segment taux
    bins = np.quantile(merged['Taux_pct'], np.linspace(0,1,n_segments+1))
    labels = [f"T{idx+1}" for idx in range(n_segments)]
    merged['Segment_Taux'] = pd.cut(merged['Taux_pct'], bins=bins, labels=labels, include_lowest=True)
    seg = merged.groupby('Segment_Taux')['Taux_pct'].agg(['min','max']).reset_index()
    seg.columns = ['Groupe','Min Pourcentage','Max Pourcentage']
    return merged, seg

# 6. Matrix of Majorations
@st.cache_data
def compute_matrix(alpha_steps, beta_steps, sigma):
    rows = len(alpha_steps)
    cols = len(beta_steps)
    M = np.zeros((rows, cols))
    # fill first cell
    M[0,0] = 0
    # fill first column
    for i in range(1, rows):
        M[i,0] = M[i-1,0] - alpha_steps[i-1]
    # fill remaining
    for i in range(rows):
        for j in range(1, cols):
            M[i,j] = M[i,j-1] - beta_steps[j-1]
    # adjust scale to satisfy M[-1,-1] = sigma
    current = M[-1,-1]
    factor = sigma / current if current != 0 else 1.0
    M = M * factor
    return M

# ---- Streamlit App ----
def main():
    st.title("Analyse Atouts PRO")
    # Sidebar: file inputs
    st.sidebar.header("Chargement des données")
    elr_file = st.sidebar.file_uploader("ELR CSV", type=['csv'])
    tarif_file = st.sidebar.file_uploader("Tarif Vendu CSV", type=['csv'])
    activite_file = st.sidebar.file_uploader("Activité CSV", type=['csv'])
    taux_file = st.sidebar.file_uploader("Taux Concrétisation CSV", type=['csv'])

    if elr_file and tarif_file and activite_file and taux_file:
        elr, tarif, activite, taux = load_data(elr_file, tarif_file, activite_file, taux_file)
        # Processing
        elr_seg, seg_elr = segment_elr(elr)
        tarif_f = filter_tarif(tarif)
        data_all = merge_elr_tarif(elr_seg, tarif_f)
        data_all = enrich_marche(data_all, activite)
        data_all_fus, seg_taux = merge_taux(data_all, taux)

        # Display raw data
        st.header("Données Fusionnées Completes")
        st.dataframe(data_all_fus)

        # Key indicators
        st.markdown("### Indicateurs Clés")
        col1, col2, col3 = st.columns(3)
        col1.metric("Total Activités", data_all_fus['Code activité'].nunique())
        col2.metric("Moyenne ELR", f"{data_all_fus['ELR_pct'].mean():.2f}%")
        col3.metric("Moyenne Taux Concrétisation", f"{data_all_fus['Taux_pct'].mean():.2f}%")

        # Interactive visualizations
        st.header("Visualisations Interactives")
        # Volume par code activité
        fig1 = px.bar(data_all_fus.groupby('Code activité').size().reset_index(name='Count'), x='Code activité', y='Count')
        st.plotly_chart(fig1)

        # Corrélations
        st.subheader("Corrélation des Indicateurs")
        corr = data_all_fus[['ELR_pct','Taux_pct','Somme_tarif_vendu']].corr()
        fig2 = px.imshow(corr, text_auto=True)
        st.plotly_chart(fig2)

        # Segment analysis
        st.header("Analyse par Segment")
        selected = st.multiselect("Sélectionner Code Activité", data_all_fus['Code activité'].unique())
        if selected:
            df_sel = data_all_fus[data_all_fus['Code activité'].isin(selected)]
            fig3 = px.box(df_sel, x='Segment_ELR', y='Somme_tarif_vendu', points='all')
            st.plotly_chart(fig3)

        # Matrice de Majoration
        st.header("Matrice de Majoration")
        sigma = st.number_input("Valeur sigma (M_{10,20})", value=100.0)
        # Get step input ranges
        st.subheader("Intervalle des Pas alpha (Taux)")
        alpha_min, alpha_max = st.slider("Alpha min/max", 0.0, 50.0, (5.0,10.0), step=0.5)
        st.subheader("Intervalle des Pas beta (ELR)")
        beta_min, beta_max = st.slider("Beta min/max", 0.0, 50.0, (5.0,10.0), step=0.5)
        # Distribute steps evenly
        alpha_steps = np.linspace(alpha_min, alpha_max, 10)
        beta_steps = np.linspace(beta_min, beta_max, 20)
        M = compute_matrix(alpha_steps, beta_steps, sigma)
        st.write("Matrice (20x10):")
        st.dataframe(pd.DataFrame(M, index=[f"T{i+1}" for i in range(10)],
                                  columns=[f"G{j+1}" for j in range(20)]))
        # Heatmap
        st.subheader("Heatmap de la Matrice")
        fig4 = px.imshow(M, aspect="auto", labels={'x':'ELR Segment','y':'Taux Segment'})
        st.plotly_chart(fig4)

if _name_ == '_main_':
    main()
